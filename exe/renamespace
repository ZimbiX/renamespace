#!/usr/bin/env ruby

# frozen_string_literal: true

$LOAD_PATH << File.expand_path('../lib', __dir__)

require 'clamp'

require 'renamespace'

Clamp.allow_options_after_parameters = true

Clamp do # rubocop:disable Metrics/BlockLength
  self.description = <<~TEXT
    Renamespaces a Ruby source file:

    - Moves the file
    - Updates, to match the new location, the name of the class/module within the file, including its namespacing
    - Updates usages of the class/module
    - Updates the path to the file in all requires
    - Moves the associated spec file

    Class/module namespaces are derived from the paths provided.

    If you change the number of namespaces, expect to have to run RuboCop autocorrect afterwards to clean up formatting.
  TEXT

  parameter 'SOURCE_FILE_PATH', 'The current path of the Ruby source code file to renamespace'
  parameter 'DESTINATION_FILE_PATH', 'The desired desination path of the file'

  option ['-o', '--can-omit-prefixes'], 'COUNT',
    'How many levels of namespacing to omit up to when replacing usages of the class/module. ' \
    'Too low, and some cases may be missed; too high, and some incorrect replacements are likely to occur',
    default: 0, &method(:Integer)

  option '--no-superclass-prefixing', :flag, "Don't prefix superclasses with their previous namespace"

  option '--version', :flag, 'Show version' do
    puts Renamespace::VERSION
    exit 0
  end

  def execute
    Renamespace.new(
      source_file_path: source_file_path,
      destination_file_path: destination_file_path,
      can_omit_prefixes_count: can_omit_prefixes,
      no_superclass_prefixing: no_superclass_prefixing?,
    ).call
  end
end
